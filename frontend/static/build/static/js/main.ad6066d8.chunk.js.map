{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","display_name","avatar","preview","handleInput","bind","handleImage","handleSubmit","e","this","setState","target","name","value","file","files","reader","FileReader","onloadend","result","readAsDataURL","a","preventDefault","formData","FormData","append","options","method","headers","Cookies","get","body","fetch","response","console","log","onSubmit","type","onChange","src","alt","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iSAgFeA,E,kDA3Eb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,aAAc,GACdC,OAAQ,KACRC,QAAS,IAGX,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBACnB,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBAVH,E,+CAarB,SAAYG,GACVC,KAAKC,SAAL,eAAiBF,EAAEG,OAAOC,KAAOJ,EAAEG,OAAOE,U,yBAG5C,SAAYL,GAAI,IAAD,OACTM,EAAON,EAAEG,OAAOI,MAAM,GAC1BN,KAAKC,SAAS,CACZR,OAAQY,IAIV,IAAIE,EAAS,IAAIC,WACjBD,EAAOE,UAAY,WACjB,EAAKR,SAAS,CACZP,QAASa,EAAOG,UAIpBH,EAAOI,cAAcN,K,iEAMvB,WAAmBN,GAAnB,mBAAAa,EAAA,6DACEb,EAAEc,kBACEC,EAAW,IAAIC,UACVC,OAAO,SAAUhB,KAAKT,MAAME,QACrCqB,EAASE,OAAO,eAAgBhB,KAAKT,MAAMC,cAC3CsB,EAASE,OAAO,OAAQ,GAElBC,EAAU,CACdC,OAAQ,OACRC,QAAS,CACP,cAAeC,IAAQC,IAAI,cAE7BC,KAAMR,GAZV,SAeyBS,MAAM,0BAA2BN,GAf1D,OAeQO,EAfR,OAgBEC,QAAQC,IAAIF,GAhBd,iD,2EAmBE,WACE,OACE,uBAAMG,SAAU3B,KAAKF,aAArB,UACE,uBAAO8B,KAAK,OAAOzB,KAAK,eAAeC,MAAOJ,KAAKT,MAAMC,aAAcqC,SAAU7B,KAAKL,cACtF,uBAAOiC,KAAK,OAAOzB,KAAK,SAAS0B,SAAU7B,KAAKH,cAG9CG,KAAKT,MAAME,OACT,qBAAKqC,IAAK9B,KAAKT,MAAMG,QAASqC,IAAI,KAClC,KAGJ,wBAAQH,KAAK,SAAb,kC,GArEUI,aCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ad6066d8.chunk.js","sourcesContent":["import { Component } from 'react';\nimport Cookies from 'js-cookie'\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      display_name: '',\n      avatar: null,\n      preview: '',\n    }\n\n    this.handleInput = this.handleInput.bind(this);\n    this.handleImage = this.handleImage.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\nhandleInput(e) {\n  this.setState({ [e.target.name]: e.target.value })\n}\n\nhandleImage(e) {\n  let file = e.target.files[0]\n  this.setState({\n    avatar: file, // could also do [e.target.name]: file\n    // saves file to state\n  });\n\n  let reader = new FileReader(); // allows us to read the content of a file\n  reader.onloadend = () => {\n    this.setState({\n      preview: reader.result\n    })\n  }\n\n  reader.readAsDataURL(file)\n  // on load end event\n  // asynchronously read the file and tell it what to do with the file\n  // reading the file and setting it to the preview property on state\n}\n\nasync handleSubmit(e) {\n  e.preventDefault();\n  let formData = new FormData();\n  formData.append('avatar', this.state.avatar);\n  formData.append('display_name', this.state.display_name);\n  formData.append('user', 1);\n\n  const options = {\n    method: 'POST',\n    headers: {\n      'X-CSRFToken': Cookies.get('csrftoken'),\n    },\n    body: formData,\n  };\n\n  const response = await fetch('/api/v1/users/profiles/', options);\n  console.log(response);\n}\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input type=\"text\" name=\"display_name\" value={this.state.display_name} onChange={this.handleInput}/>\n        <input type=\"file\" name=\"avatar\" onChange={this.handleImage} />\n\n        {\n          this.state.avatar\n          ? <img src={this.state.preview} alt=\"\"/>\n          : null\n        }\n\n        <button type='submit'>Save profile?</button>\n\n      </form>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}